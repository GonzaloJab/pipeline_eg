name: Build and Deploy to ECS

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment for the build

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (Docker multi-platform build)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 3: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::354918374652:role/GITHUB_deploy
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Login to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Step 5: Build, Tag, and Push Docker Compose Services to ECR
      - name: Build, Tag, and Push Docker Compose Services to ECR
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          IMAGE_TAG: latest
        run: |
          # Build and push images using docker compose
          docker compose build
          docker compose push

      # Step 6: Update ECS Task Definition and Deploy
      - name: Deploy to ECS
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          IMAGE_TAG: latest
        run: |
          # Update container definitions dynamically
          jq '.[] | select(.name=="backend").image = "'$ECR_REGISTRY'/testing/fast_api-backend:'$IMAGE_TAG'" | select(.name=="frontend").image = "'$ECR_REGISTRY'/testing/fast_api-frontend:'$IMAGE_TAG'"' container-definitions.json > updated-container-definitions.json

          # Register the new task definition with ECS
          aws ecs register-task-definition \
            --family $TASK_DEFINITION \
            --cli-input-json file://updated-container-definitions.json

          # Update ECS service to use the new task definition and force a new deployment
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $TASK_DEFINITION \
            --force-new-deployment
