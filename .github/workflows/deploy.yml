name: Build and Deploy to ECS

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment for the build

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (Docker multi-platform build)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 3: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::354918374652:role/GITHUB_deploy
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Login to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Step 5: Build, Tag, and Push Docker Compose Services to ECR
      - name: Build, Tag, and Push Docker Compose Services to ECR
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          IMAGE_TAG: latest
        run: |
          # Build and push images using docker compose
          docker compose build
          docker compose push

      # Step 6: Update ECS Task Definition and Deploys
      - name: Deploy to ECS
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          IMAGE_TAG: latest
          TASK_DEFINITION: test_api
          CLUSTER_NAME: testing
          SERVICE_NAME: test_api-service
          EXECUTION_ROLE_ARN: arn:aws:iam::354918374652:role/ecsTaskExecutionRole
          AWS_REGION: eu-north-1
        run: |
          # Get the ACTUAL service name (with suffix)
          ACTUAL_SERVICE_NAME=$(aws ecs list-services --cluster $CLUSTER_NAME --region $AWS_REGION \
            --query "serviceArns[?contains(@, '$SERVICE_NAME-')]" \
            --output text | awk -F'/' '{print $NF}')  

          # Fallback if no suffixed service exists
          if [ -z "$ACTUAL_SERVICE_NAME" ]; then
            ACTUAL_SERVICE_NAME="$SERVICE_NAME"
          fi

          # Debug: Print all environment variables
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "CLUSTER_NAME: $CLUSTER_NAME"
          echo "SERVICE_NAME: $SERVICE_NAME"

          # 1. Update container images
          jq --arg backend_image "$ECR_REGISTRY/testing/fast_api:backend-latest" \
            --arg frontend_image "$ECR_REGISTRY/testing/fast_api:frontend-latest" \
            'map( if .name == "backend" then .image = $backend_image elif .name == "frontend" then .image = $frontend_image else . end )' \
            container-definitions.json > updated-container-definitions.json

          # 2. Create complete task definition
          cat <<EOF > final-task-definition.json
          {
            "family": "$TASK_DEFINITION",
            "executionRoleArn": "$EXECUTION_ROLE_ARN",
            "requiresCompatibilities": ["FARGATE"],
            "networkMode": "awsvpc",
            "cpu": "1024",
            "memory": "3072",
            "containerDefinitions": $(cat updated-container-definitions.json)
          }
          EOF

          # 3. Validate JSON
          jq '.' final-task-definition.json

          # 4. Register task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://final-task-definition.json \
            --region $AWS_REGION \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "Registered task definition ARN: $NEW_TASK_DEF_ARN"

          # 5. Deploy service
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $ACTUAL_SERVICE_NAME  \
            --task-definition $NEW_TASK_DEF_ARN \
            --region $AWS_REGION \
            --force-new-deployment