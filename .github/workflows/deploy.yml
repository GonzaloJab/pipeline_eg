name: Build and Deploy to ECS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  IMAGE_TAG: latest
  CLUSTER_NAME: testing
  AWS_REGION: eu-north-1
  EXECUTION_ROLE_ARN: arn:aws:iam::354918374652:role/ecsTaskExecutionRole
  VPC_SUBNETS: vpc-017328606a774e563  # Replace with your subnet IDs
  SECURITY_GROUP: sg-08721e8cd1e5d3851  # Replace with your security group ID
  ALB_SECURITY_GROUP: sg-0d3c32d2679d29ef6  # Replace with your ALB security group ID
  BACKEND_TG_ARN: arn:aws:elasticloadbalancing:eu-north-1:354918374652:targetgroup/FastAPI-test-backend/7528d3dd3d269edc
  FRONTEND_TG_ARN: arn:aws:elasticloadbalancing:eu-north-1:354918374652:targetgroup/FastApi-test-frontend/1a75e9a7e2881e8e
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::354918374652:role/GITHUB_deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # - name: Build, Tag, and Push Images
      #   run: |
      #     docker compose build
      #     docker compose push

      - name: Deploy Backend Service
        run: |
          # Create backend task definition JSON
          cat <<EOF > backend-task-def.json
          {
            "family": "fastapi-backend",
            "executionRoleArn": "$EXECUTION_ROLE_ARN",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "1024",
            "memory": "2048",
            "containerDefinitions": [
              {
                "name": "backend",
                "image": "$ECR_REGISTRY/testing/fast_api:backend-$IMAGE_TAG",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 8000,
                    "hostPort": 8000,
                    "protocol": "tcp"
                  }
                ],
                "environment": [
                  {"name": "ENV_VAR_NAME", "value": "value"}
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/fastapi-backend",
                    "awslogs-region": "$AWS_REGION",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }
          EOF

          # Register task definition
          BACKEND_TASK_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://backend-task-def.json \
            --region $AWS_REGION \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "Backend task ARN: $BACKEND_TASK_ARN"

          # Check if service exists
          SERVICE_EXISTS=$(aws ecs describe-services \
            --cluster $CLUSTER_NAME \
            --services fastapi-backend-service \
            --region $AWS_REGION \
            --query 'length(services[?status==`ACTIVE`])' \
            --output text)

          if [ "$SERVICE_EXISTS" -eq 1 ]; then
            echo "Updating existing backend service"
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service fastapi-backend-service \
              --task-definition $BACKEND_TASK_ARN \
              --region $AWS_REGION \
              --force-new-deployment
          else
            echo "Creating new backend service"
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name fastapi-backend-service \
              --task-definition $BACKEND_TASK_ARN \
              --launch-type FARGATE \
              --desired-count 1 \
              --network-configuration "awsvpcConfiguration={subnets=[$VPC_SUBNETS],securityGroups=[$SECURITY_GROUP],assignPublicIp=DISABLED}" \
              --load-balancers "targetGroupArn=$BACKEND_TG_ARN,containerName=backend,containerPort=8000" \
              --region $AWS_REGION
          fi

      - name: Deploy Frontend Service
        run: |
          # Create frontend task definition JSON
          cat <<EOF > frontend-task-def.json
          {
            "family": "node-frontend",
            "executionRoleArn": "$EXECUTION_ROLE_ARN",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "1024",
            "memory": "2048",
            "containerDefinitions": [
              {
                "name": "frontend",
                "image": "$ECR_REGISTRY/testing/fast_api:frontend-$IMAGE_TAG",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "hostPort": 3000,
                    "protocol": "tcp"
                  }
                ],
                "environment": [
                  {"name": "BACKEND_URL", "value": "http://fastapi-backend-service:8000"},
                  {"name": "ENV_VAR_NAME", "value": "value"}
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/node-frontend",
                    "awslogs-region": "$AWS_REGION",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }
          EOF
      
          # Register task definition
          FRONTEND_TASK_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://frontend-task-def.json \
            --region $AWS_REGION \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "Frontend task ARN: $FRONTEND_TASK_ARN"
      
          # Check service existence more reliably
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster $CLUSTER_NAME \
            --services node-frontend-service \
            --region $AWS_REGION \
            --query 'services[0].status' \
            --output text 2>/dev/null || echo "MISSING")
      
          if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
            echo "Updating existing frontend service"
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service node-frontend-service \
              --task-definition $FRONTEND_TASK_ARN \
              --region $AWS_REGION \
              --force-new-deployment
          else
            echo "Creating new frontend service"
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name node-frontend-service \
              --task-definition $FRONTEND_TASK_ARN \
              --launch-type FARGATE \
              --desired-count 1 \
              --network-configuration "awsvpcConfiguration={subnets=[${VPC_SUBNETS//,/ }],securityGroups=[$SECURITY_GROUP],assignPublicIp=DISABLED}" \
              --load-balancers "targetGroupArn=$FRONTEND_TG_ARN,containerName=frontend,containerPort=3000" \
              --region $AWS_REGION
          fi
      
          # Verify service deployment
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services node-frontend-service \
            --region $AWS_REGION
          echo "Frontend service deployment complete!"